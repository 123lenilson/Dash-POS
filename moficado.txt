html


<!-- Price Adjustment Modal -->
<div id="pm-overlay" class="pm-overlay" aria-hidden="true">
  <div id="pm-dialog" class="pm-dialog" role="dialog" aria-modal="true" aria-labelledby="pm-title">
    <header class="pm-header">
      <h3 id="pm-title">Adjust Price</h3>
    </header>

    <div class="pm-display" aria-live="polite">
      <span class="pm-currency" id="pm-currency">$</span>
      <span class="pm-amount" id="pm-amount">0.00</span>
    </div>

    <div class="pm-keypad" role="application" aria-label="Numeric keypad">
      <button class="pm-key" data-key="7" type="button">7</button>
      <button class="pm-key" data-key="8" type="button">8</button>
      <button class="pm-key" data-key="9" type="button">9</button>

      <button class="pm-key" data-key="4" type="button">4</button>
      <button class="pm-key" data-key="5" type="button">5</button>
      <button class="pm-key" data-key="6" type="button">6</button>

      <button class="pm-key" data-key="1" type="button">1</button>
      <button class="pm-key" data-key="2" type="button">2</button>
      <button class="pm-key" data-key="3" type="button">3</button>

      <button class="pm-key pm-key-clear" data-key="C" type="button">C</button>
      <button class="pm-key" data-key="0" type="button">0</button>
      <button class="pm-key" data-key="." type="button">.</button>

      <!-- wide backspace -->
      <button class="pm-key pm-key-back" data-key="back" type="button">
        <i class="fa-solid fa-delete-left" aria-hidden="true"></i>
      </button>
    </div>

    <div class="pm-actions">
      <button id="pm-cancel" class="btn pm-btn-cancel" type="button">Cancel</button>
      <button id="pm-confirm" class="btn pm-btn-confirm" type="button">Confirm Price</button>
    </div>

    <button class="pm-close" id="pm-close" aria-label="Fechar">Ã—</button>
  </div>
</div>







css







/* Price Modal Styles (prefixo pm-) */
.pm-overlay {
  position: fixed;
  inset: 0;
  display: none;               /* toggle via JS */
  align-items: center;
  justify-content: center;
  background: rgba(0,0,0,0.45);
  z-index: 1400;
  padding: 20px;
}

.pm-overlay.is-open { display: flex; }

.pm-dialog {
  width: 420px;
  max-width: calc(100% - 40px);
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 20px 50px rgba(0,0,0,0.35);
  position: relative;
  padding: 18px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Arial;
}

/* header */
.pm-header h3 {
  margin: 0;
  font-size: 18px;
  font-weight: 700;
  color: #111827;
}

/* display */
.pm-display {
  display:flex;
  align-items:center;
  gap:8px;
  border: 2px solid #e8eefb;
  padding: 14px 16px;
  border-radius: 10px;
  background: #fff;
  box-shadow: inset 0 1px 0 rgba(0,0,0,0.02);
  font-size: 22px;
}
.pm-currency { color:#374151; font-weight:700; opacity:0.9; }
.pm-amount {
  color:#6b7280;
  font-weight:700;
  font-size: 28px;
  letter-spacing: 0.5px;
}

/* keypad grid */
.pm-keypad {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 12px;
}

.pm-key {
  background: #f8fafc;
  border: 1px solid #e6edf6;
  border-radius: 10px;
  padding: 14px 10px;
  font-size: 18px;
  font-weight:700;
  cursor: pointer;
  box-shadow: 0 3px 8px rgba(10,10,30,0.03);
  transition: transform .06s ease, background .08s;
}
.pm-key:active { transform: translateY(1px); }
.pm-key:hover { background: #f1f7ff; }

.pm-key-clear {
  background: #fff0f0;
  color: #c53030;
  border-color: #f6d6d6;
}
.pm-key-back {
  grid-column: 1 / -1;
  display:flex;
  align-items:center;
  justify-content:center;
  padding: 12px;
  background: #f3f4f6;
}

/* actions */
.pm-actions {
  display:flex;
  gap: 10px;
  margin-top: 6px;
}
.pm-btn-cancel {
  flex: 1;
  background: #f3f4f6;
  color: #374151;
  border: none;
  padding: 12px;
  border-radius: 8px;
  cursor: pointer;
}
.pm-btn-confirm {
  flex: 1;
  background: linear-gradient(135deg,#f97316,#fb923c);
  color: #fff;
  border: none;
  padding: 12px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 700;
}

/* close icon top-right */
.pm-close {
  position:absolute;
  right: 10px;
  top: 8px;
  border:0;
  background:transparent;
  font-size:22px;
  cursor:pointer;
  color:#6b7280;
}

/* disabled confirm */
.pm-btn-confirm[disabled] {
  opacity: 0.55;
  cursor: not-allowed;
}

/* responsive */
@media (max-width:420px){
  .pm-dialog { width: 100%; padding: 14px; }
  .pm-amount { font-size: 22px; }
  .pm-key { padding: 12px; font-size: 16px; }
}



js







/* Price Modal - API: showPriceModal({ initial, currency, decimals }) -> Promise<number|null> */
(function(){
  const overlay = document.getElementById('pm-overlay');
  const dialog = document.getElementById('pm-dialog');
  const elCurrency = document.getElementById('pm-currency');
  const elAmount = document.getElementById('pm-amount');
  const keys = Array.from(document.querySelectorAll('.pm-key'));
  const btnCancel = document.getElementById('pm-cancel');
  const btnConfirm = document.getElementById('pm-confirm');
  const btnClose = document.getElementById('pm-close');

  let resolvePromise = null;
  let currentStr = '0';   // store user input as string, e.g. "12.34"
  let decimals = 2;
  let currencySymbol = '$';

  function formatDisplay(str){
    // Normalize empty -> "0"
    if(!str || str === '') str = '0';
    // Ensure there is a decimal point if decimals > 0
    if(decimals > 0 && !str.includes('.')) {
      // append fraction zeros for display only
      const padded = Number(str).toFixed(decimals);
      return padded;
    }
    // If has dot, format integer part with grouping but keep decimals count
    if(str.includes('.')){
      const [intPart, frac] = str.split('.');
      const intNum = Number(intPart || '0').toLocaleString();
      const truncatedFrac = (frac || '').slice(0, decimals).padEnd(decimals, '0');
      return `${intNum}.${truncatedFrac}`;
    }
    return Number(str).toLocaleString();
  }

  function updateUI(){
    elAmount.textContent = formatDisplay(currentStr);
    btnConfirm.disabled = false; // you can add logic to disable if 0 or unchanged
  }

  function openModal(opts = {}){
    currentStr = (typeof opts.initial === 'number') ? String(opts.initial.toFixed(opts.decimals ?? decimals)) : (opts.initial ?? '0');
    decimals = (typeof opts.decimals === 'number') ? opts.decimals : decimals;
    currencySymbol = opts.currency ?? currencySymbol;
    elCurrency.textContent = currencySymbol;
    overlay.classList.add('is-open');
    overlay.setAttribute('aria-hidden','false');
    updateUI();
    // trap focus to the dialog (simple)
    setTimeout(()=>{ dialog.querySelector('.pm-key')?.focus(); }, 50);
  }

  function closeModal(){
    overlay.classList.remove('is-open');
    overlay.setAttribute('aria-hidden','true');
  }

  function clearAll(){ currentStr = '0'; updateUI(); }

  function pressDigit(d){
    // d is '0'..'9' or '.'
    if(d === '.'){
      if(decimals === 0) return;
      if(currentStr.includes('.')) return;
      currentStr += '.';
    } else {
      // append digit with guard for decimals length
      if(currentStr === '0') {
        currentStr = d;
      } else if(currentStr.includes('.')){
        const [, frac] = currentStr.split('.');
        if(frac.length >= decimals) return; // prevent more decimals
        currentStr += d;
      } else {
        // avoid overflow long integer part (optional)
        if(currentStr.length >= 12) return;
        currentStr += d;
      }
    }
    updateUI();
  }

  function pressBack(){
    if(currentStr.length <= 1){
      currentStr = '0';
    } else {
      currentStr = currentStr.slice(0, -1);
      if(currentStr === '-' || currentStr === '') currentStr = '0';
    }
    // if ends with '.' remove trailing dot case (we allow)
    updateUI();
  }

  // hookup buttons
  keys.forEach(k => {
    k.addEventListener('click', (e) => {
      const key = k.dataset.key;
      if(!key) return;
      if(key === 'C') clearAll();
      else if(key === 'back') pressBack();
      else if(key === '.') pressDigit('.');
      else if(/^\d$/.test(key)) pressDigit(key);
    });
  });

  // click outside to close? we will not close to avoid losing input; keep Cancel button as close action
  btnCancel.addEventListener('click', () => {
    closeModal();
    if(resolvePromise) { resolvePromise(null); resolvePromise = null; }
  });
  btnClose.addEventListener('click', () => {
    closeModal();
    if(resolvePromise) { resolvePromise(null); resolvePromise = null; }
  });

  // confirm
  btnConfirm.addEventListener('click', () => {
    // parse number safely
    let value = parseFloat(currentStr.replace(/,/g, ''));
    if(Number.isNaN(value)) value = 0;
    // round to decimals
    const factor = Math.pow(10, decimals);
    value = Math.round(value * factor) / factor;
    closeModal();
    if(resolvePromise) { resolvePromise(value); resolvePromise = null; }
  });

  // keyboard support
  document.addEventListener('keydown', (e) => {
    if(!overlay.classList.contains('is-open')) return;
    if(e.key >= '0' && e.key <= '9'){ e.preventDefault(); pressDigit(e.key); }
    else if(e.key === '.' || e.key === ','){ e.preventDefault(); pressDigit('.'); }
    else if(e.key === 'Backspace'){ e.preventDefault(); pressBack(); }
    else if(e.key === 'Escape'){ e.preventDefault(); btnCancel.click(); }
    else if(e.key === 'Enter'){ e.preventDefault(); btnConfirm.click(); }
  });

  // expose API
  window.showPriceModal = function(opts = {}){
    return new Promise((resolve) => {
      resolvePromise = resolve;
      openModal(opts);
    });
  };

})();
